package internal

import (
	"unsafe"
)

func f976(ctx *Context, l0 int32, l1 int32, l2 float64, l3 int32) {
	var l4 float32
	_ = l4
	var l5 float32
	_ = l5
	var l6 float32
	_ = l6
	var l7 float32
	_ = l7
	var s0i32 int32
	_ = s0i32
	var s1i32 int32
	_ = s1i32
	var s2i32 int32
	_ = s2i32
	var s3i32 int32
	_ = s3i32
	var s1i64 int64
	_ = s1i64
	var s0f32 float32
	_ = s0f32
	var s1f32 float32
	_ = s1f32
	var s2f32 float32
	_ = s2f32
	var s3f32 float32
	_ = s3f32
	var s1f64 float64
	_ = s1f64
	var s2f64 float64
	_ = s2f64
	var s3f64 float64
	_ = s3f64
	s0i32 = l1
	s0f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+16)]))
	l4 = s0f32
	s0i32 = l3
	if s0i32 != 0 {
		s0i32 = l0
		s1f32 = l4
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+32)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+20)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+28)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+0)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+8)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+28)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+4)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+32)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+4)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+4)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+20)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+8)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+16)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+8)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+20)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+24)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+12)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+32)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+12)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+0)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+32)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+8)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+24)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+16)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+8)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+12)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+0)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+20)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+20)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+12)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+28)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+16)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+24)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+24)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+4)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+24)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+0)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+28)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+28)])) = s1f32
		s0i32 = l0
		s1i32 = l1
		s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+0)]))
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+16)]))
		s1f32 = s1f32 * s2f32
		s2i32 = l1
		s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+4)]))
		s3i32 = l1
		s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+12)]))
		s2f32 = s2f32 * s3f32
		s1f32 = s1f32 - s2f32
		s1f64 = float64(s1f32)
		s2f64 = l2
		s1f64 = s1f64 * s2f64
		s1f32 = float32(s1f64)
		*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+32)])) = s1f32
		return
	}
	s0i32 = l0
	s1f32 = l4
	s1f64 = float64(s1f32)
	s2f64 = l2
	s1f64 = s1f64 * s2f64
	s1f32 = float32(s1f64)
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+0)])) = s1f32
	s0i32 = l0
	s1i32 = l1
	s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+4)]))
	s1f32 = -s1f32
	s1f64 = float64(s1f32)
	s2f64 = l2
	s1f64 = s1f64 * s2f64
	s1f32 = float32(s1f64)
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+4)])) = s1f32
	s0i32 = l0
	s1i32 = l1
	s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+4)]))
	s1f64 = float64(s1f32)
	s2i32 = l1
	s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+20)]))
	s2f64 = float64(s2f32)
	s1f64 = s1f64 * s2f64
	s2i32 = l1
	s2f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s2i32+16)]))
	s2f64 = float64(s2f32)
	s3i32 = l1
	s3f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s3i32+8)]))
	s3f64 = float64(s3f32)
	s2f64 = s2f64 * s3f64
	s1f64 = s1f64 - s2f64
	s2f64 = l2
	s1f64 = s1f64 * s2f64
	s1f32 = float32(s1f64)
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+8)])) = s1f32
	s0i32 = l0
	s1i32 = l1
	s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+12)]))
	s1f32 = -s1f32
	s1f64 = float64(s1f32)
	s2f64 = l2
	s1f64 = s1f64 * s2f64
	s1f32 = float32(s1f64)
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+12)])) = s1f32
	s0i32 = l0
	s1i32 = l1
	s1f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s1i32+0)]))
	s1f64 = float64(s1f32)
	s2f64 = l2
	s1f64 = s1f64 * s2f64
	s1f32 = float32(s1f64)
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+16)])) = s1f32
	s0i32 = l1
	s0f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+12)]))
	l4 = s0f32
	s0i32 = l1
	s0f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+8)]))
	l5 = s0f32
	s0i32 = l1
	s0f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+0)]))
	l6 = s0f32
	s0i32 = l1
	s0f32 = *(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+20)]))
	l7 = s0f32
	s0i32 = l0
	s1i64 = 0
	*(*uint64)(unsafe.Pointer(&ctx.Mem[int(s0i32+24)])) = uint64(s1i64)
	s0i32 = l0
	s1f32 = l4
	s1f64 = float64(s1f32)
	s2f32 = l5
	s2f64 = float64(s2f32)
	s1f64 = s1f64 * s2f64
	s2f32 = l6
	s2f64 = float64(s2f32)
	s3f32 = l7
	s3f64 = float64(s3f32)
	s2f64 = s2f64 * s3f64
	s1f64 = s1f64 - s2f64
	s2f64 = l2
	s1f64 = s1f64 * s2f64
	s1f32 = float32(s1f64)
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+20)])) = s1f32
	s0i32 = l0
	s1f32 = 1
	*(*float32)(unsafe.Pointer(&ctx.Mem[int(s0i32+32)])) = s1f32
}
